import os
import io
import base64
from datetime import datetime
from fpdf import FPDF
import matplotlib.pyplot as plt
import networkx as nx
from typing import Dict, List, Tuple, Optional
import matplotlib.patches as mpatches

class SecurityReportGenerator:
    def __init__(self):
        self.pdf = FPDF()
        self.pdf.add_page()
        # 유니코드 지원 폰트 설정
        self.pdf.set_font("Arial", size=12)
        
    def generate_report(self, 
                       contract_address: str,
                       graph: nx.DiGraph,
                       dangerous_functions: List[str],
                       analysis_date: Optional[str] = None) -> bytes:
        """보안 분석 보고서를 생성합니다."""
        try:
            if analysis_date is None:
                analysis_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                
            # 제목 페이지
            self._add_title_page(contract_address, analysis_date)
            
            # 요약 페이지
            self._add_summary_page(contract_address, graph, dangerous_functions)
            
            # 위험 함수 상세 분석
            if dangerous_functions:
                self._add_dangerous_functions_page(dangerous_functions)
            
            # 함수 호출 구조 페이지 추가 (그래프 이미지만)
            self._add_function_calls_page_with_image(graph, dangerous_functions)
            
            # 함수 호출 상세 정보 페이지 추가
            self._add_function_call_details_page(graph, dangerous_functions)
            
            # 권장사항
            self._add_recommendations_page()
            
            # PDF 바이트 반환
            pdf_bytes = self.pdf.output(dest='S')
            return bytes(pdf_bytes)
            
        except Exception as e:
            print(f"PDF 생성 중 오류: {str(e)}")
            # 오류 발생 시 기본 PDF 생성
            return self._create_error_pdf(contract_address, str(e))
    
    def _create_error_pdf(self, contract_address: str, error_msg: str) -> bytes:
        """오류 발생 시 기본 PDF를 생성합니다."""
        error_pdf = FPDF()
        error_pdf.add_page()
        error_pdf.set_font("Arial", 'B', 16)
        error_pdf.cell(0, 20, "PDF Generation Error", ln=True)
        error_pdf.set_font("Arial", size=12)
        error_pdf.cell(0, 10, f"Contract: {contract_address}", ln=True)
        error_pdf.cell(0, 10, f"Error: {error_msg}", ln=True)
        return bytes(error_pdf.output(dest='S'))
    
    def _add_title_page(self, contract_address: str, analysis_date: str):
        """제목 페이지를 추가합니다."""
        self.pdf.add_page()
        self.pdf.set_font("Arial", 'B', 24)
        self.pdf.cell(0, 40, "ETH Anomaly Lens", ln=True, align='C')
        self.pdf.cell(0, 20, "Security Analysis Report", ln=True, align='C')
        
        self.pdf.set_font("Arial", size=12)
        self.pdf.cell(0, 20, "", ln=True)
        self.pdf.cell(0, 10, f"Contract Address: {contract_address}", ln=True)
        self.pdf.cell(0, 10, f"Analysis Date: {analysis_date}", ln=True)
        self.pdf.cell(0, 10, f"Generated by: ETH Anomaly Lens v1.0", ln=True)
        
    def _add_summary_page(self, contract_address: str, graph: nx.DiGraph, dangerous_functions: List[str]):
        """요약 페이지를 추가합니다."""
        self.pdf.add_page()
        self.pdf.set_font("Arial", 'B', 16)
        self.pdf.cell(0, 20, "Executive Summary", ln=True)
        
        self.pdf.set_font("Arial", size=12)
        self.pdf.cell(0, 10, "", ln=True)
        
        # 기본 정보
        self.pdf.set_font("Arial", 'B', 12)
        self.pdf.cell(0, 10, "Contract Information:", ln=True)
        self.pdf.set_font("Arial", size=12)
        self.pdf.cell(0, 8, f"- Address: {contract_address}", ln=True)
        self.pdf.cell(0, 8, f"- Total Functions: {len(graph.nodes())}", ln=True)
        self.pdf.cell(0, 8, f"- Function Calls: {len(graph.edges())}", ln=True)
        self.pdf.cell(0, 8, f"- Dangerous Functions: {len(dangerous_functions)}", ln=True)
        
        # 위험도 평가
        self.pdf.cell(0, 10, "", ln=True)
        self.pdf.set_font("Arial", 'B', 12)
        self.pdf.cell(0, 10, "Risk Assessment:", ln=True)
        self.pdf.set_font("Arial", size=12)
        
        if len(dangerous_functions) == 0:
            self.pdf.cell(0, 8, "- Risk Level: LOW", ln=True)
            self.pdf.cell(0, 8, "- No dangerous functions detected", ln=True)
        elif len(dangerous_functions) <= 2:
            self.pdf.cell(0, 8, "- Risk Level: MEDIUM", ln=True)
            self.pdf.cell(0, 8, f"- {len(dangerous_functions)} dangerous functions found", ln=True)
        else:
            self.pdf.cell(0, 8, "- Risk Level: HIGH", ln=True)
            self.pdf.cell(0, 8, f"- {len(dangerous_functions)} dangerous functions found", ln=True)
            
    def _add_dangerous_functions_page(self, dangerous_functions: List[str]):
        """위험 함수 상세 분석 페이지를 추가합니다."""
        self.pdf.add_page()
        self.pdf.set_font("Arial", 'B', 16)
        self.pdf.cell(0, 20, "Dangerous Functions Analysis", ln=True)
        
        self.pdf.set_font("Arial", size=12)
        self.pdf.cell(0, 10, "", ln=True)
        
        for i, func in enumerate(dangerous_functions, 1):
            self.pdf.set_font("Arial", 'B', 12)
            self.pdf.cell(0, 10, f"{i}. {func}", ln=True)
            self.pdf.set_font("Arial", size=10)
            self.pdf.cell(0, 8, "   This function contains potentially dangerous operations.", ln=True)
            self.pdf.cell(0, 8, "   Review implementation carefully before deployment.", ln=True)
            self.pdf.cell(0, 5, "", ln=True)
            
    def _add_function_calls_page_with_image(self, graph: nx.DiGraph, dangerous_functions: List[str]):
        """함수 호출 관계 페이지를 추가합니다 (그래프 이미지만 포함)."""
        self.pdf.add_page()
        self.pdf.set_font("Arial", 'B', 16)
        self.pdf.cell(0, 20, "Function Call Structure", ln=True)
        
        self.pdf.set_font("Arial", size=12)
        self.pdf.cell(0, 10, "", ln=True)
        
        # 그래프 이미지 생성 및 추가
        try:
            graph_image = create_graph_image(graph, dangerous_functions)
            
            # 임시 파일로 저장
            temp_image_path = "temp_graph.png"
            with open(temp_image_path, 'wb') as f:
                f.write(graph_image)
            
            # PDF에 이미지 추가 (페이지 중앙에 배치)
            self.pdf.image(temp_image_path, x=10, y=50, w=190, h=200)
            
            # 임시 파일 삭제
            os.remove(temp_image_path)
            
        except Exception as e:
            self.pdf.cell(0, 8, f"Graph image generation failed: {str(e)}", ln=True)
            
    def _add_function_call_details_page(self, graph: nx.DiGraph, dangerous_functions: List[str]):
        """함수 호출 상세 정보 페이지를 추가합니다."""
        self.pdf.add_page()
        self.pdf.set_font("Arial", 'B', 16)
        self.pdf.cell(0, 20, "Function Call Details", ln=True)
        
        self.pdf.set_font("Arial", size=12)
        self.pdf.cell(0, 10, "", ln=True)
        
        if graph.edges():
            for caller, callee in graph.edges():
                if callee in dangerous_functions:
                    self.pdf.set_font("Arial", 'B', 10)
                    self.pdf.cell(0, 8, f"- {caller} -> {callee} (DANGEROUS)", ln=True)
                else:
                    self.pdf.set_font("Arial", size=10)
                    self.pdf.cell(0, 8, f"- {caller} -> {callee}", ln=True)
        else:
            self.pdf.cell(0, 8, "No function call relationships detected.", ln=True)
            
    def _add_recommendations_page(self):
        """권장사항 페이지를 추가합니다."""
        self.pdf.add_page()
        self.pdf.set_font("Arial", 'B', 16)
        self.pdf.cell(0, 20, "Security Recommendations", ln=True)
        
        self.pdf.set_font("Arial", size=12)
        self.pdf.cell(0, 10, "", ln=True)
        
        recommendations = [
            "1. Review all dangerous functions identified in this report",
            "2. Conduct thorough testing before deployment",
            "3. Consider using established security patterns and libraries",
            "4. Implement proper access controls and validation",
            "5. Consider professional security audit for production contracts",
            "6. Monitor for unusual activity after deployment",
            "7. Keep dependencies and libraries updated",
            "8. Document all security-critical functions"
        ]
        
        for rec in recommendations:
            self.pdf.cell(0, 8, rec, ln=True)
            
        self.pdf.cell(0, 10, "", ln=True)
        self.pdf.set_font("Arial", 'I', 10)
        self.pdf.cell(0, 8, "Note: This report is for educational purposes only.", ln=True)
        self.pdf.cell(0, 8, "For production use, consult with security professionals.", ln=True)

def create_graph_image(graph: nx.DiGraph, dangerous_functions: List[str]) -> bytes:
    """그래프 이미지를 생성합니다."""
    try:
        plt.figure(figsize=(14, 10))  # PDF용 크기 조정
        
        # 레이아웃 설정 - 더 넓은 간격
        if len(graph.nodes()) > 1:
            pos = nx.spring_layout(graph, k=4, iterations=150)  # 더 넓은 간격
        else:
            pos = nx.spring_layout(graph)
        
        # 노드 색상 및 크기 설정
        node_colors = ['red' if node in dangerous_functions else 'lightblue' for node in graph.nodes()]
        node_sizes = [3500 if node in dangerous_functions else 2500 for node in graph.nodes()]
        
        # 엣지 색상 설정
        edge_colors = []
        for u, v in graph.edges():
            if v in dangerous_functions:
                edge_colors.append('red')
            else:
                edge_colors.append('gray')
        
        # 그래프 그리기
        nx.draw(
            graph, pos,
            node_color=node_colors,
            node_size=node_sizes,
            font_size=9,  # PDF용 폰트 크기
            font_weight='bold',
            arrows=True,
            edge_color=edge_colors,
            width=2,
            with_labels=True,
            arrowstyle='->',
            arrowsize=20
        )
        
        plt.title("Function Call Structure", fontsize=16, fontweight='bold', pad=20)
        
        # 범례 추가 (PDF용)
        legend_elements = [
            mpatches.Patch(color='red', label='Dangerous Functions'),
            mpatches.Patch(color='lightblue', label='Normal Functions')
        ]
        plt.legend(handles=legend_elements, loc='upper right', fontsize=12)
        
        # 여백 조정
        plt.tight_layout()
        
        # 이미지를 바이트로 변환
        img_buffer = io.BytesIO()
        plt.savefig(img_buffer, format='png', dpi=300, bbox_inches='tight')
        img_buffer.seek(0)
        plt.close()
        
        return img_buffer.getvalue()
        
    except Exception as e:
        print(f"그래프 이미지 생성 중 오류: {str(e)}")
        # 오류 발생 시 기본 이미지 생성
        return _create_default_graph_image()
    
def _create_default_graph_image() -> bytes:
    """기본 그래프 이미지를 생성합니다."""
    try:
        plt.figure(figsize=(12, 8))
        plt.text(0.5, 0.5, 'Graph Image\nGeneration Failed', 
                ha='center', va='center', fontsize=16)
        plt.title("Function Call Structure", fontsize=14, fontweight='bold')
        
        img_buffer = io.BytesIO()
        plt.savefig(img_buffer, format='png', dpi=300, bbox_inches='tight')
        img_buffer.seek(0)
        plt.close()
        
        return img_buffer.getvalue()
        
    except Exception as e:
        print(f"기본 이미지 생성 중 오류: {str(e)}")
        # 최후의 수단: 빈 바이트 반환
        return b'' 